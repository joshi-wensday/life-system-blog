/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/6aHe4NzliST
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuCheckboxItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"

export function LifeSystemJourney() {
  const [selectedPatch, setSelectedPatch] = useState(null)
  const [filterEmoji, setFilterEmoji] = useState(null)
  const [filterVersion, setFilterVersion] = useState(null)
  const patches = [
    {
      id: 1,
      version: "1.0",
      emoji: "ðŸŒ±",
      title: "Seed of Life",
      description: "Initial release of the LIFE SYSTEM, laying the foundation.",
      notes:
        "This first patch introduced the core concepts of the LIFE SYSTEM, including the fundamental elements, cycles, and principles. It provided a basic framework for personal growth and development.",
      tools: ["LIFE Journal", "Habit Tracker"],
    },
    {
      id: 2,
      version: "2.0",
      emoji: "ðŸŒ³",
      title: "Bloom of Life",
      description: "Expanded the LIFE SYSTEM with new features and enhancements.",
      notes:
        "The Bloom of Life patch focused on cultivating deeper self-awareness, improving emotional intelligence, and developing more meaningful relationships. It introduced new tools and practices to support holistic well-being.",
      tools: ["LIFE Compass", "Gratitude Calendar"],
    },
    {
      id: 3,
      version: "3.0",
      emoji: "ðŸŒº",
      title: "Flourish of Life",
      description: "Integrated the LIFE SYSTEM with advanced personal development concepts.",
      notes:
        "The Flourish of Life patch integrated the LIFE SYSTEM with more advanced personal development concepts, such as mindfulness, purpose exploration, and values-driven decision making. It provided a more comprehensive approach to personal growth and fulfillment.",
      tools: ["LIFE Vision Board", "Mindfulness Exercises"],
    },
    {
      id: 4,
      version: "4.0",
      emoji: "ðŸŒˆ",
      title: "Radiance of Life",
      description: "Expanded the LIFE SYSTEM to include community and global impact.",
      notes:
        "The Radiance of Life patch expanded the LIFE SYSTEM to include a focus on community engagement, social impact, and global consciousness. It introduced new tools and practices to help individuals connect with their local and global communities, and to make a positive difference in the world.",
      tools: ["LIFE Collaboration Hub", "Volunteer Opportunities"],
    },
    {
      id: 5,
      version: "5.0",
      emoji: "ðŸŒŒ",
      title: "Cosmic Life",
      description: "Integrated the LIFE SYSTEM with universal principles and cosmic consciousness.",
      notes:
        "The Cosmic Life patch integrated the LIFE SYSTEM with universal principles and cosmic consciousness. It explored the interconnectedness of all things, the nature of consciousness, and the individual's role in the larger cosmic tapestry. This patch provided a more holistic and transcendent perspective on personal growth and development.",
      tools: ["LIFE Meditation Guides", "Cosmic Journaling"],
    },
  ]
  const filteredPatches = useMemo(() => {
    let filtered = patches
    if (filterEmoji) {
      filtered = filtered.filter((patch) => patch.emoji === filterEmoji)
    }
    if (filterVersion) {
      const [minVersion, maxVersion] = filterVersion.split("-").map(Number)
      filtered = filtered.filter((patch) => {
        const patchVersion = Number(patch.version.split(".")[0])
        return patchVersion >= minVersion && patchVersion <= maxVersion
      })
    }
    return filtered
  }, [filterEmoji, filterVersion])
  const progressPercentage = useMemo(() => {
    const totalPatches = patches.length
    const completedPatches = filteredPatches.length
    return (completedPatches / totalPatches) * 100
  }, [filteredPatches, patches])
  return (
    <div className="w-full max-w-4xl mx-auto p-6 sm:p-10">
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-2xl font-bold">LIFE SYSTEM Journey</h1>
        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" size="sm">
                <FilterIcon className="w-4 h-4 mr-2" />
                Filter
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end" className="w-56">
              <DropdownMenuLabel>Filter by Emoji</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuCheckboxItem checked={filterEmoji === null} onCheckedChange={() => setFilterEmoji(null)}>
                All
              </DropdownMenuCheckboxItem>
              {patches.map((patch) => (
                <DropdownMenuCheckboxItem
                  key={patch.id}
                  checked={filterEmoji === patch.emoji}
                  onCheckedChange={() => setFilterEmoji(filterEmoji === patch.emoji ? null : patch.emoji)}
                >
                  {patch.emoji}
                </DropdownMenuCheckboxItem>
              ))}
              <DropdownMenuSeparator />
              <DropdownMenuLabel>Filter by Version</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuCheckboxItem checked={filterVersion === null} onCheckedChange={() => setFilterVersion(null)}>
                All
              </DropdownMenuCheckboxItem>
              {Array.from(new Set(patches.map((patch) => patch.version.split(".")[0]))).map((version) => (
                <DropdownMenuCheckboxItem
                  key={version}
                  checked={filterVersion === `${version}-${version}`}
                  onCheckedChange={() =>
                    setFilterVersion(filterVersion === `${version}-${version}` ? null : `${version}-${version}`)
                  }
                >
                  {version}.x
                </DropdownMenuCheckboxItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </div>
      <div className="relative">
        <div className="absolute inset-x-0 top-1/2 -translate-y-1/2 h-px bg-muted-foreground/20" />
        <div className="relative flex flex-col gap-8">
          {filteredPatches.map((patch) => (
            <div
              key={patch.id}
              className={`relative flex items-start gap-4 ${
                selectedPatch === patch.id ? "bg-background p-4 rounded-lg shadow-lg" : ""
              }`}
            >
              <div
                className={`aspect-square w-12 h-12 rounded-full flex items-center justify-center text-2xl font-bold transition-colors ${
                  selectedPatch === patch.id ? "bg-primary text-primary-foreground" : "bg-muted text-muted-foreground"
                }`}
                onClick={() => setSelectedPatch(selectedPatch === patch.id ? null : patch.id)}
              >
                {patch.emoji}
              </div>
              <div className="flex-1">
                <div className="flex items-center gap-2">
                  <h3 className="text-lg font-medium">{patch.title}</h3>
                  <span className="text-muted-foreground text-sm">v{patch.version}</span>
                </div>
                <p className="text-muted-foreground">{patch.description}</p>
                {selectedPatch === patch.id && (
                  <div className="mt-4">
                    <p>{patch.notes}</p>
                    <div className="mt-4 flex flex-wrap gap-2">
                      {patch.tools.map((tool, index) => (
                        <Badge key={index} variant="outline">
                          {tool}
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
      <div className="mt-8 flex items-center justify-between">
        <div className="text-muted-foreground">
          {filteredPatches.length} / {patches.length} patches
        </div>
        <Progress value={progressPercentage} className="w-full max-w-md" />
      </div>
    </div>
  )
}

function FilterIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>
  )
}
